{"version":3,"sources":["app/views/Solution1/WebSocket.js"],"names":["WebSocket","useState","setWs","useDispatch","useSelector","state","homeReducer","token","useEffect","ws","onopen","console","log","onmessage","evt","message","JSON","parse","data","processJsonResponse","close","resp","status","result","hypotheses","length","text","transcript_normed","transcript","endsWith","slice","final"],"mappings":"mLAKA,IAYaA,EAAY,SAAZA,EAAa,GAAqB,oBAAC,IAAD,EACzBC,mBAAS,MADgB,mBAClCC,GADkC,cAE5BC,cACCC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAEnBL,mBAAS,CACjCM,MAAO,sEANoC,6BAoC7C,OA3BAC,qBAAU,WACR,IAEMC,EAAK,IAAIT,EAFC,wDAchB,OAXAS,EAAGC,OAAS,WACVC,QAAQC,IAAI,uCAGdV,EAAMO,GAENA,EAAGI,UAAY,SAAAC,GACb,IAAMC,EAAUC,KAAKC,MAAMH,EAAII,MAC/BC,EAAoBJ,IAGf,WAILJ,QAAQC,IAAI,kBACZH,EAAGW,MAAM,IAAM,mDAEhB,IAEHZ,qBAAU,cAEP,IACI,MAYHW,EAAsB,SAACE,GACzB,GAAmB,GAAfA,EAAKC,QAAeD,EAAKE,QAAUF,EAAKE,OAAOC,WAAWC,OAAS,EAAG,CAGtE,IACIC,EADaL,EAAKE,OAAOC,WAAW,GAAGG,mBAAqBN,EAAKE,OAAOC,WAAW,GAAGI,WAK1F,GAAY,UAARF,EACA,OAGAA,EAAKG,SAAS,OAEdH,EAAOA,EAAKI,MAAM,GAAI,IAGtBT,EAAKE,OAAOQ,OAEF,SAAWL,EAAO","file":"static/js/20.e822de62.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport * as Actions from '../../redux/action-creators/home'\n\nconst SILENT_THRESHOLD = 1000;\nconst SILENT_DURATION = 10;\n\nlet result = null; // xâu text đang nhận dạng\nlet isStop = true; // có đang DỪNG record audio hay không\nlet ws = null; // đối tượng web socket\n\nlet recorder = null; // đối tượng recorder\nlet buffer = null; // có chuyển về local được không?\nlet audioContext = null; // đối tượng audio context\nlet countSilentDuration = 0;\n\nexport const WebSocket = ({ ...restProps }) => {\n  const [ws, setWs] = useState(null)\n  const dispatch = useDispatch()\n  const homeRedux = useSelector(state => state.homeReducer)\n\n  const [state, setState] = useState({\n    token: 'k-P-k03vy7MgQ0iV8ItD5oLrjh7CigLWMR1oCeP5QMGs461nNu07k-VzENKNQW-c'\n  })\n\n  useEffect(() => {\n    const wsEndpoint = `ws://aisol.vn/asr/stream/socket/16k/client/ws/speech`\n    // eslint-disable-next-line no-undef\n    const ws = new WebSocket(wsEndpoint)\n    ws.onopen = () => {\n      console.log('Socket channel connected to group ')\n    }\n\n    setWs(ws)\n\n    ws.onmessage = evt => {\n      const message = JSON.parse(evt.data)\n      processJsonResponse(message)\n    }\n\n    return () => {\n    //   if (ws && ws.readyState == ws.OPEN) {\n    //     ws.send('EOS')\n    //   }\n      console.log('Closing socket')\n      ws.close(1000, 'User chose other part. Change socket channel')\n    }\n  }, [])\n\n  useEffect(() => {\n    // dispatch(Actions.updateEditText({text_norm: restProps.sentences[0]}))\n  }, [])\n  return null\n}\n\nconst convertFloat32ToInt16 = float32ArrayData => {\n  let l = float32ArrayData.length\n  let int16ArrayData = new Int16Array(l)\n  while (l--) {\n    int16ArrayData[l] = Math.min(1, float32ArrayData[l]) * 0x7fff\n  }\n  return int16ArrayData\n}\n\nconst processJsonResponse = (resp) => {\n    if (resp.status == 0 && resp.result && resp.result.hypotheses.length > 0) {\n        //console.log(resp);\n        // Shorthand of conditional operator\n        let transcript = resp.result.hypotheses[0].transcript_normed || resp.result.hypotheses[0].transcript;\n        let text = transcript; // decodeURI(\n        //console.log(text);\n\n        // Không nhận dạng được\n        if (text == '<unk>.') {\n            return;\n        }\n\n        if (text.endsWith('.')) {\n            // Xóa ký tự cuối cùng của xâu\n            text = text.slice(0, -1); \n        }\n\n        if (resp.result.final) {\n            // Đã nhận dạng xong, lưu kết quả\n            result += \"<span>\" + text + \". </span>\";\n            // displayText(result);\n        } else {\n            // Vẫn đang nhận dạng\n            // displayText(result + '<span class=\"temp\">' + text + '</span>');\n        }\n    }\n}\n"],"sourceRoot":""}